diff --git a/common/homedir.c b/common/homedir.c
index 67bbde8..372ba2c 100644
--- a/common/homedir.c
+++ b/common/homedir.c
@@ -440,6 +440,63 @@ w32_rootdir (void)
 
 
 #ifndef HAVE_W32_SYSTEM /* Unix */
+//__MVS__
+//
+#define _OPEN_SYS
+#include <stdio.h>
+#include <sys/ps.h>
+#include <sys/types.h>
+#include <pwd.h>
+#include <time.h>
+#include <string.h>
+#include <limits.h>
+#include <errno.h>
+
+char *readProcessPath()
+{
+ int token;
+  W_PSPROC buf;
+  struct passwd *pw;
+ char *parent;
+ parent = malloc(PATH_MAX);
+ memset( parent, 0, PATH_MAX);
+  token = 0;
+
+  memset(&buf, 0x00, sizeof(buf));
+  buf.ps_pathptr   = (char *) malloc(buf.ps_pathlen   = PS_PATHBLEN);
+  if (buf.ps_pathptr   == NULL)
+    perror("buffer allocation error");
+  else do {
+    if ((token = w_getpsent(token, &buf, sizeof(buf))) == -1)
+      perror("w_getpsent() error");
+    else if (token > 0)
+    {
+      if ((pw = getpwuid(buf.ps_ruid)) == NULL)
+        perror("getpwuid() error");
+      else
+      {
+         printf("token %d: pid %10d, user %8s, started %s", token,
+               (int) buf.ps_pid, pw->pw_name,
+               ctime(&buf.ps_starttime));
+         pid_t mypid = getpid();
+         if (buf.ps_pid == mypid)
+         {
+            char *res = realpath(buf.ps_pathptr, parent);
+            if (res)
+            {
+                return parent;
+            }
+            else {
+                perror("realpath() error");
+           }
+           break;
+         }
+      }
+    }
+  } while (token > 0);
+
+  return "";
+}
 /* Determine the root directory of the gnupg installation on Unix.
  * The standard case is that this function returns NULL so that the
  * root directory as configured at build time is used.  However, it
@@ -478,7 +535,20 @@ unix_rootdir (int want_sysconfdir)
       for (;;)
         {
           buffer = xmalloc (bufsize+1);
-          nread = readlink (MYPROC_SELF_EXE, buffer, bufsize);
+          #ifdef __MVS__
+                char *str;
+                if( (str = readProcessPath()) != NULL) {
+		    nread = readlink (str, buffer, bufsize);
+		}
+		else
+		{
+	         	nread =-1;
+		}
+                free(str);
+          #else
+                nread = readlink (MYPROC_SELF_EXE, buffer, bufsize);
+          #endif
+
           if (nread < 0)
             {
               err = gpg_error_from_syserror ();
